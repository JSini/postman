{
	"info": {
		"_postman_id": "67053ad4-f262-4c9a-83ad-0a2c162c57f3",
		"name": "Valentino Artisan Coffee House API",
		"description": "An API for managing orders and products at a coffee place named Valentino's Artisan Coffee House.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16398300",
		"_collection_link": "https://www.postman.com/team-x-123/workspace/freecodecamp-api-test-automation-with-postman/collection/16398300-67053ad4-f262-4c9a-83ad-0a2c162c57f3?action=share&source=collection_link&creator=16398300"
	},
	"item": [
		{
			"name": "status",
			"item": [
				{
					"name": "Get API status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear()\r",
									"console.log(\"From Pre-request Script: going to run the request!!\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers\", () => {\r",
									"    console.log(pm.response.headers.get('X-Powered-By'));\r",
									"    pm.expect(pm.response.headers.get('X-Powered-By')).to.eql('Express')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							]
						},
						"description": "Retrieve the current status of the API"
					},
					"response": [
						{
							"name": "API status",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\"\n}"
						}
					]
				}
			],
			"description": "Get the status of the API.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "products",
			"item": [
				{
					"name": "Get all products",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products?page=3&category=other",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "3",
									"description": "The page number to fetch"
								},
								{
									"key": "category",
									"value": "other"
								},
								{
									"key": "limit",
									"value": "3",
									"disabled": true
								}
							]
						},
						"description": "Retrieve a paginated list of products, 10 products per page"
					},
					"response": [
						{
							"name": "A list of products",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/products?page=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to fetch"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"category\": \"<string>\",\n    \"name\": \"<string>\",\n    \"isAvailable\": \"<boolean>\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"category\": \"<string>\",\n    \"name\": \"<string>\",\n    \"isAvailable\": \"<boolean>\"\n  }\n]"
						}
					]
				},
				{
					"name": "Get single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Schema is JSON\", () => {\r",
									"    const schema = {\r",
									"        type: 'object',\r",
									"        properties: {\r",
									"            id: {\r",
									"                type: 'integer'\r",
									"            }\r",
									"        },\r",
									"        required: ['id', 'category', 'name', 'isAvailable', 'product-description', 'additionalText'],\r",
									"        additionalProperties: true\r",
									"    }\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:productId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":productId"
							],
							"variable": [
								{
									"key": "productId",
									"value": "{{product_id}}"
								}
							]
						},
						"description": "Retrieve a paginated list of products, 10 products per page"
					},
					"response": [
						{
							"name": "A list of products",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/products?page=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to fetch"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"category\": \"<string>\",\n    \"name\": \"<string>\",\n    \"isAvailable\": \"<boolean>\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"category\": \"<string>\",\n    \"name\": \"<string>\",\n    \"isAvailable\": \"<boolean>\"\n  }\n]"
						},
						{
							"name": "Get single product example",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/products/:productId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products",
										":productId"
									],
									"variable": [
										{
											"key": "productId",
											"value": "{{product_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1708608478&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=uQCFtWUKkTeedzcwHI%2F78SniI4XIRpjmelCyTM3VXjc%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1708608478&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=uQCFtWUKkTeedzcwHI%2F78SniI4XIRpjmelCyTM3VXjc%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "247"
								},
								{
									"key": "Etag",
									"value": "W/\"f7-uL8aQNtyzeuRQxJtSxoEIDklu+8\""
								},
								{
									"key": "Date",
									"value": "Thu, 22 Feb 2024 13:27:58 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\":4002,\n    \"category\": \"other\",\n    \"name\": \"Hot Chocolate\",\n    \"isAvailable\": true,\n    \"product-description\": \"A warm and comforting drink made with milk, cocoa, and sugar, often topped with whipped cream or marshmallows.\",\n    \"additionalText\": \"Contains milk, sugar\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "clients",
			"item": [
				{
					"name": "Register a new client",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{$randomExampleEmail}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients"
							]
						},
						"description": "Register a new API client by providing an email address"
					},
					"response": [
						{
							"name": "Client registered",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"<email>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"value\": \"reference #/components/schemas/ApiClient not found in the OpenAPI spec\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "orders",
			"item": [
				{
					"name": "Create a new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response;\r",
									"\r",
									"pm.test(\"response body is JSON\", ()=> {\r",
									"    pm.response.to.be.json;\r",
									"    response = pm.response.json();\r",
									"    pm.collectionVariables.set('orderId', response.id)\r",
									"});\r",
									"\r",
									"pm.test(\"Customer Name\", ()=>{\r",
									"    pm.expect(response.customerName).to.eql(pm.collectionVariables.get('customerName'))\r",
									"})\r",
									"\r",
									"pm.test('Order ID format', ()=> {\r",
									"    pm.expect(response.id).to.match(/^[A-Z0-9]{9}$/);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    const schema = {\r",
									"        type: 'object',\r",
									"        properties: {\r",
									"            id: {\r",
									"                type: 'string',\r",
									"                pattern: '^[A-Z0-9]{9}$'\r",
									"            },\r",
									"            clientId: {\r",
									"                type: 'string'\r",
									"            },\r",
									"            created: {\r",
									"                type: 'string',\r",
									"                format: 'date-time'\r",
									"            },\r",
									"            customerName: {\r",
									"                type: 'string'\r",
									"            },\r",
									"            products: {\r",
									"                type: 'array',\r",
									"                items: {\r",
									"                    type: 'object',\r",
									"                    properties: {\r",
									"                        id: {\r",
									"                            type: 'integer'\r",
									"                        },\r",
									"                        quantity: {\r",
									"                            type: 'integer'\r",
									"                        }\r",
									"                    },\r",
									"                    required: ['id', 'quantity']\r",
									"                }\r",
									"            },\r",
									"        },\r",
									"        required: ['id', 'clientId', 'created', 'customerName', 'products'],\r",
									"        additionalProperties: false\r",
									"    }\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('customerName', pm.variables.replaceIn(\"{{$randomFullName}}\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"{{customerName}}\",\n  \"products\": [\n    {\n      \"id\": {{product_id}},\n      \"quantity\": 1\n    },\n    {\n      \"id\": 2002,\n      \"quantity\": 3\n    }\n  ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						},
						"description": "Place a new order by providing customer details and ordered products"
					},
					"response": [
						{
							"name": "Create a new order",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"customerName\": \"{{customerName}}\",\n  \"products\": [\n    {\n      \"id\": {{product_id}},\n      \"quantity\": 1\n    },\n    {\n      \"id\": 2002,\n      \"quantity\": 3\n    }\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1708605790&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=oIEyNlVvcWoTw6ybFF64pbl0WL2zGuIXBPc5JN4Pmz4%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1708605790&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=oIEyNlVvcWoTw6ybFF64pbl0WL2zGuIXBPc5JN4Pmz4%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "169"
								},
								{
									"key": "Etag",
									"value": "W/\"a9-MXafekS+jod2kV4rC9KMEE5LqxU\""
								},
								{
									"key": "Date",
									"value": "Thu, 22 Feb 2024 12:43:10 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"DZPUWCIFD\",\n    \"clientId\": \"2xUdAe1WP\",\n    \"created\": \"2024-02-22T12:43:10.154Z\",\n    \"customerName\": \"Keith Batz\",\n    \"products\": [\n        {\n            \"id\": 4002,\n            \"quantity\": 1\n        },\n        {\n            \"id\": 2002,\n            \"quantity\": 3\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get all orders",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response;\r",
									"\r",
									"pm.test(\"Response is JSON\", () => {\r",
									"    pm.response.to.be.json;\r",
									"    response = pm.response.json()\r",
									"});\r",
									"\r",
									"pm.test('Validate Property id', () => {\r",
									"    pm.expect(response).to.have.property('id');\r",
									"    pm.expect(response.id).to.match(/^[A-Z0-9]{9}$/);\r",
									"});\r",
									"\r",
									"pm.test('Validate property products', () => {\r",
									"    pm.expect(response).to.have.property('products');\r",
									"    pm.expect(response.products).to.be.an(\"array\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{order_id}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "The requested order",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{apiKey}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "x-api-key",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://valentinos-coffee.glitch.me",
			"disabled": true
		},
		{
			"key": "apiKey",
			"value": "ENTER A VALID API KEY"
		},
		{
			"key": "baseUrl",
			"value": "https://valentinos-coffee.herokuapp.com",
			"type": "string"
		},
		{
			"key": "product_id",
			"value": "4002"
		},
		{
			"key": "order_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "customerName",
			"value": ""
		}
	]
}